name: Continuous integration

on:
  push:
    branches:
      - main
  pull_request:

env:
  RUST_BACKTRACE: full
  RUSTC_WRAPPER: sccache
  SCCACHE_CACHE_SIZE: 2G
  SCCACHE_DIR: /home/runner/.cache/sccache

jobs:
  test:
    name: build + test + fmt + clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Set up sccache cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-sccache-

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install sccache (ubuntu-latest)
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: v0.3.0
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          chmod a+x $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH 

      - name: Start sccache server
        run: sccache --start-server

      - name: Run clippy
        run: |
          cargo install cargo-action-fmt
          cargo clippy --all-features --all-targets --workspace --message-format json | cargo-action-fmt

      - name: Print sccache stats
        run: sccache --show-stats
      - name: Stop sccache server
        run: sccache --stop-server || true






